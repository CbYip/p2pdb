

@startuml

class TableNode <<Entity>> {
    - NodeId  // 节点ID,一个原子事件一个节点
    - RequestId //  请求ID,用于幂等验证
    - Type // 节点类型 默认log
    - LogicalClock //逻辑时钟
    - LastNodeId //因果关系事件id(上一个关联事件id) 为空代表没有因果关系                 
    - DataIds //关联多个数据对象            
}


class TableData <<Entity>> {
    - DataId  // 数据ID  一个节点包含多个数据对象
    - Operation //自定义操作信息
    - Propertie //自定义属性信息                 
}

class TableLink <<Entity>> {
    - LinkId   // 链接id
    - LastNodeId  // 上一个节点CID
    - NodeId //当前节点id
    - DatabaseId   // 数据库id
    - InstanceId   // 实例id
    - TableId   // 表id
    - TableAlias   // 表别名
}


class DatabaseInfomation <<Entity>> {
    //数据库信息
    - DatabaseId   // 数据库id
    - InstanceId   // 实例id
    - DatabaseName   // 数据库名字
    - LocalInstanceId  // 本地对等节点
}


class TableInfomation <<Entity>> {
    //表信息
    - TableID   // 表id 
    - DatabaseID   // 数据库id 
    - InstanceId   // 实例id
    - TableName   // 表名字
    - LogicalClock //逻辑时钟
    - Version //表 cas 版本号（预留）
    - Schema //建表语句

}


class PeerNodeInfomation <<Entity>> {
    //对等节点信息记录表
    - DatabaseId   // 数据库id
    - TableId //表id
    - LocalPeerId  // 本地对等节点
    - LocalInstanceId  // 本地实例id
    - RemotePeerId //远程对等节点地址 与LocalPeerId是一对多关系
    - RemoteHost //远程对等节点Host 
    - RemoteInstanceId //远程对等节点实例id 与LocalPeerId是一对多关系
    - LastDagMergeNodeId //最后一次dag 合并时的节点id
    - ProtocolId  //defualt /ipfs/id/1.0.0
}






class InstanceInformation <<Entity>> {
    //实例配置信息
    - InstanceId  // 实例id  全局唯一
    - LocalPeerId  // 本地对等节点  ,新的会覆盖旧的
    - LocalHost //本地host
    - GlobalLogicalClock //全局逻辑时钟

}


class Hook <<Entity>> {
    //hook 监听配置表
    - event_type  // 事件type
    - LocalPeerId  // 本地对等节点  ,新的会覆盖旧的
    - LocalHost //本地host
    - GlobalLogicalClock //全局逻辑时钟

}



InstanceInformation --> PeerNodeInfomation : 存储对等节点信息
' note on link #red: note that is red


' PeerNodeInfomation --> NodeSyncInfomation : A link
MerkleDAGNode --> MerkleDAGData : 存储merkle-dag 节点信息及数据信息
' note right on link #blue
' this is my note on right link
' end note

MerkleDAGData --> MerkleDAGLink : 存储merkle-dag 的边,用于递归遍历生成dag树结构
' note right on link #blue
' this is my note on right link
' end note
DatabaseInfomation --> TableInfomation :存储实例的数据库、表结构信息
@enduml